openapi: 3.0.0
info:
  contact:
    email: preston.lee@logicahealth.org
    url: https://www.logicahealth.org
  description: The HL7 Health Services Platform Marketplace (HSPM or Marketplace)
    specification is a REST API for publication, cataloging, discovering, and deployment
    of products and executable knowledge into any compliant IT environment in an automated
    manner. It is similar to an app marketplace for health products in that it manages
    deployment to a users local infrastructural environment and data context. It is
    not a flat directory of SMART-on-FHIR and other UI-only applications, but MAY
    be used for this purpose. A Marketplace can be implemented by vendors, providers,
    standards developing organizations (SDOs), consortiums, and all manner of parties
    interested in interoperable products.
  termsOfService: https://www.logicahealth.org
  title: Health Services Platform Marketplace Specification
  version: 2.0.0
externalDocs:
  description: Find out more about Health Services Platform Marketplace
  url: https://www.logicahealth.org
servers:
- url: http://localhost:3000
- url: https://marketplace-server-test.logicahealth.org
- url: https://marketplace-server.logicahealth.org
tags:
- description: A Product is a structured declaration of capabilities for a package
    of executable or consumable content, with release managed in a discrete lifecycle.
    A CDS Hooks or FHIR Terminology service “ExampleService” developed by vendor “ExampleSoft”,
    for example, would be declared to a Marketplace instance prior to actual release
    of the software to establish descriptive text, create screenshots, set standards-related
    declarations, and other fields.
  name: Product Services
- name: Product Operations
- name: Product Build Services
- name: Product Build Dependency Services
- name: Product Build Configuration Services
- name: Product Build Configuration Task Services
- name: Product Build Exposure Services
- name: Product License Services
- name: Product Logo Services
- name: Product Screenshot Services
- name: Platform Services
- description: 'Marketplace-wide declaration of a standardized – or at least conventionalized
    – computational integration point. They are not constraints to HL7 standards.  '
  name: Interface Services
- description: Licenses are globally declared terms of use, and MAY or MAY NOT be
    useful in all contexts. As discussed in , this is expected to be customized to
    the local sales and business model. Implementors and operators only focused on
    F/OSS Services may be satisfied by the barebones model.
  name: License Services
- description: 'An IdentityProvider is a deployment-specific resource containing client
    configuration information for a resource OpenID Connect authentication/authorization
    server. This information changes very infrequently. Of special note is the “public_keys”
    field, which SHOULD be polled and updated automatically. Issuers typically cycle
    through keys pairs frequently and failing to update them will result in failed
    User authentication flows.      '
  name: Identity Provider Services
- description: A distinct person or system with some degree of access or interest
    to a Marketplace instance.
  name: User Services
- description: A named collection of Users for purposes of batch Role assignment.
  name: Group Services
- description: A named set of permissions.
  name: Role Services
- name: Role Appointment Services
- name: Entitlement Services
- name: Entitlement Claim Services
- name: Attempt Services
paths:
  /licenses:
    get:
      operationId: getLicenses
      parameters:
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/license'
                type: array
                xml:
                  name: licenses
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/license'
                type: array
          description: License
      summary: Returns the list of licenses available in the marketplace
      tags:
      - License Services
    post:
      operationId: createLicense
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/License'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/License'
        description: License to be added to the marketplace
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add License was succesful
      summary: Adds a new license to the marketplace
      tags:
      - License Services
    put:
      operationId: updateLicense
      parameters:
      - description: Id of the license to retrieve
        explode: false
        in: path
        name: licenseId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/license'
          application/xml:
            schema:
              $ref: '#/components/schemas/license'
        description: License to be added to the marketplace
        required: true
      responses:
        "200":
          description: True for updated
      summary: Updates the license
      tags:
      - License Services
  /licenses/{licenseId}:
    delete:
      operationId: deleteLicense
      parameters:
      - description: Id of the license to delete
        explode: false
        in: path
        name: licenseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: True if delete was successful
      summary: Deletes the license by Id
      tags:
      - License Services
    get:
      operationId: getLicense
      parameters:
      - description: Id of the license to retrieve
        explode: false
        in: path
        name: licenseId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/license'
            application/json:
              schema:
                $ref: '#/components/schemas/license'
          description: License located using id
      summary: Retrieves the license based on license id
      tags:
      - License Services
  /products:
    get:
      operationId: getProducts
      parameters:
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/product'
                type: array
                xml:
                  name: products
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/product'
                type: array
          description: License
      summary: Returns the list of products available in marketplace
      tags:
      - Product Services
    post:
      description: Adds a new product to the marketplace
      operationId: addProduct
      parameters:
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
          application/xml:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Product was succesful
      summary: Adds a new product to the marketplace
      tags:
      - Product Services
    put:
      description: Update a product to the marketplace
      operationId: updateService
      parameters:
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Product'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Product'
      responses:
        "200":
          description: Update Product was successful
      summary: Updates the product
      tags:
      - Product Services
  /products/{productId}/licenses:
    get:
      operationId: getProductLicenses
      parameters:
      - description: Id of the product to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/license'
                type: array
                xml:
                  name: licenses
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/license'
                type: array
          description: Product located using id
      summary: Returns the list of licenses based on product id
      tags:
      - Product License Services
    post:
      description: Adds a new license to the product identified by id
      operationId: addProductlicense
      parameters:
      - description: Id of the product to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: licenseId
        explode: true
        in: query
        name: licenseId
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Product was succesful
      summary: Adds a new license based on product id
      tags:
      - Product License Services
  /products/{productId}:
    delete:
      operationId: deleteService
      parameters:
      - description: Id of the product to delete
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Succesful
      summary: Deletes the product based on product id
      tags:
      - Product Services
    get:
      operationId: getService
      parameters:
      - description: Id of the product to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/product'
            application/json:
              schema:
                $ref: '#/components/schemas/product'
          description: Product located using id
      summary: Retrieves the product based on product id
      tags:
      - Product Services
  /products/{productId}/publish:
    post:
      description: Publishes product based on the product Id
      operationId: publishService
      parameters:
      - description: Id of the product to publish
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Publish Succesful
      summary: Publishes product based on product Id
      tags:
      - Product Operations
  /products/{productId}/unpublish:
    post:
      operationId: unpublishService
      parameters:
      - description: Id of the product to unpublish
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          description: Unpublish Succesful
      summary: Unpublishes the product base on the product Id
      tags:
      - Product Operations
  /products/{productId}/builds:
    get:
      operationId: getBuilds
      parameters:
      - description: Id of the products to add build to
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/license'
                type: array
                xml:
                  name: builds
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/license'
                type: array
          description: License
      summary: Returns the list of builds based on product id
      tags:
      - Product Build Services
    post:
      operationId: addBuild
      parameters:
      - description: Id of the products to add build to
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Build'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Build'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Build Succesful
      summary: Adds a new build based on product id
      tags:
      - Product Build Services
    put:
      operationId: updateBuild
      parameters:
      - description: Id of the product to update
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Build'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Build'
      responses:
        "200":
          description: Update Succesful
      summary: Updates the build based on product id
      tags:
      - Product Build Services
  /products/{productId}/builds/{buildId}:
    delete:
      operationId: deleteBuild
      parameters:
      - description: Id of the product to delete
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Succesful
      summary: Deletes the product based on product id
      tags:
      - Product Build Services
    get:
      operationId: getBuild
      parameters:
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/build'
            application/json:
              schema:
                $ref: '#/components/schemas/build'
          description: Build located using product Id and build Id
      summary: Retrieves the build based on build and product id
      tags:
      - Product Build Services
  /interfaces:
    post:
      description: Adds a new interface to the marketplace
      operationId: addInterface
      parameters:
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/Interface'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Interface was succesful
      summary: Adds a new interface to the marketplace
      tags:
      - Interface Services
    put:
      operationId: updateInterface
      parameters:
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/Interface'
      responses:
        "200":
          description: Update Succesful
      summary: Updates the interface
      tags:
      - Interface Services
  /interfaces/{interfaceId}:
    delete:
      operationId: deleteInterface
      parameters:
      - description: Id of the license to delete
        explode: false
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Succesful
      summary: Deletes the interface based on interface id
      tags:
      - Interface Services
    get:
      operationId: getInterface
      parameters:
      - description: Id of the interface to retrieve
        explode: false
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/interface'
            application/xml:
              schema:
                $ref: '#/components/schemas/interface'
          description: Interface
      summary: Retrieves the interface based on interface id
      tags:
      - Interface Services
  /users:
    get:
      operationId: getUsers
      parameters:
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/user'
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: User located using id
      summary: Returns the list of users
      tags:
      - User Services
    post:
      description: Adds a new User
      operationId: addUser
      parameters:
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add User was succesful
      summary: Adds a new user
      tags:
      - User Services
    put:
      operationId: updateUser
      parameters:
      - description: Id of the user to update
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          description: Update User was succesful
      summary: Updates the user
      tags:
      - User Services
  /users/{userId}:
    delete:
      operationId: deleteUser
      parameters:
      - description: Id of the license to delete
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete User was succesful
      summary: Deletes the license by Id
      tags:
      - User Services
    get:
      operationId: getUser
      parameters:
      - description: Id of the user to retrieve
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/user'
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: User located using id
      summary: Retrieves the user based on user id
      tags:
      - User Services
  /users/{userId}/identities:
    get:
      operationId: getUserIdentities
      parameters:
      - description: returns a list of user identities
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/identity'
                type: array
                xml:
                  name: userIdentities
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/identity'
                type: array
          description: License
      summary: Returns the list of identities based on user id
      tags:
      - User Services
  /users/{userId}/platforms:
    get:
      operationId: getPlatforms
      parameters:
      - description: Id of the user to update
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/platform'
                type: array
                xml:
                  name: platforms
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/platform'
                type: array
          description: License
      summary: Returns the list of platforms based on user id
      tags:
      - Platform Services
    post:
      operationId: addUserPlatform
      parameters:
      - description: Id of the user to update
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the platform to retrieve
        explode: false
        in: path
        name: platformId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          description: Update User was succesful
      summary: Adds new platform based on user id
      tags:
      - Platform Services
    put:
      operationId: updateUserPlatform
      parameters:
      - description: Id of the user to update
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the platform to update
        explode: false
        in: path
        name: platformId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          description: Update User was succesful
      summary: Updates the license
      tags:
      - Platform Services
  /users/{userId}/platforms/{platformId}:
    delete:
      operationId: deleteUserPlatform
      parameters:
      - description: Id of the license to delete
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the platform to retrieve
        explode: false
        in: path
        name: platformId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete User was succesful
      summary: Deletes the license by Id
      tags:
      - Platform Services
    get:
      operationId: getUserPlatform
      parameters:
      - description: Id of the user to retrieve
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the platform to retrieve
        explode: false
        in: path
        name: platformId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/platform'
            application/json:
              schema:
                $ref: '#/components/schemas/platform'
          description: User located using id
      summary: Retrieves the platform based on user and platform id
      tags:
      - Platform Services
  /identity_providers:
    get:
      operationId: getIdentityProviders
      parameters:
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/identityProvider'
                type: array
                xml:
                  name: indentityProviders
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/identityProvider'
                type: array
          description: License
      summary: Returns the list of Identity Providers currently available in marketplace
        marketplace
      tags:
      - Identity Provider Services
    post:
      description: Identity Provider
      operationId: addIdentityProvider
      parameters:
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/IdentityProvider'
      responses:
        "200":
          description: Add Identity Provider was succesful
      summary: Adds a new Identity Provider to the marketplace
      tags:
      - Identity Provider Services
    put:
      operationId: updateIdentityProvider
      parameters:
      - description: Id of the Identity Provider to update
        explode: false
        in: path
        name: identityProviderId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          description: Update Identity Provider was succesful
      summary: Updates license by Id
      tags:
      - Identity Provider Services
  /identity_providers/{identityProviderId}:
    delete:
      operationId: deleteIdentityProvider
      parameters:
      - description: Id of the Identity Provider to delete
        explode: false
        in: path
        name: identityProviderId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Identity Provider was succesful
      summary: Deletes the license by Id
      tags:
      - Identity Provider Services
    get:
      operationId: getIdentityProvider
      parameters:
      - description: Id of the Identity Provider to retrieve
        explode: false
        in: path
        name: identityProviderId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/identityProvider'
            application/json:
              schema:
                $ref: '#/components/schemas/identityProvider'
          description: Identity Provider located using id
      summary: Retrieves the identity provider based on identity provider id
      tags:
      - Identity Provider Services
  /groups:
    get:
      operationId: getGroups
      parameters:
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/group'
                type: array
                xml:
                  name: groups
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/group'
                type: array
          description: License
      summary: Returns the list of groups currently available in the marketplace
      tags:
      - Group Services
    post:
      operationId: addGroup
      parameters:
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/Group'
      responses:
        "200":
          description: Add Group was succesful
      summary: Adds a new group to the marketplace
      tags:
      - Group Services
    put:
      operationId: updateGroup
      parameters:
      - description: Id of the license to update
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          description: Update Group was succesful
      summary: Updates license by Id
      tags:
      - Group Services
  /groups/{groupId}:
    delete:
      operationId: deleteGroup
      parameters:
      - description: Id of the license to delete
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Group was succesful
      summary: Deletes the license by Id
      tags:
      - Group Services
    get:
      operationId: getGroup
      parameters:
      - description: Id of the group to retrieve
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/group'
            application/json:
              schema:
                $ref: '#/components/schemas/group'
          description: Group located using id
      summary: Retrieves the group based on group id
      tags:
      - Group Services
  /roles:
    get:
      operationId: getRoles
      parameters:
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/role'
                type: array
                xml:
                  name: roles
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/role'
                type: array
          description: License
      summary: Returns the list of roles currently available in the marketplace
      tags:
      - Role Services
    post:
      operationId: addRole
      parameters:
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        $ref: '#/components/requestBodies/Role'
      responses:
        "200":
          description: Add Role was succesful
      summary: Adds a new Role to the marketplace
      tags:
      - Role Services
    put:
      operationId: updateRole
      parameters:
      - description: Id of the license to update
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          description: Update Role was succesful
      summary: Updates license by Id
      tags:
      - Role Services
  /roles/{roleId}:
    delete:
      operationId: deleteRole
      parameters:
      - description: Id of the license to delete
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Role was succesful
      summary: Deletes the license by Id
      tags:
      - Role Services
    get:
      operationId: getRole
      parameters:
      - description: Id of the role to retrieve
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/role'
            application/json:
              schema:
                $ref: '#/components/schemas/role'
          description: Role located using id
      summary: Retrieves the role based on role id
      tags:
      - Role Services
  /products/{productId}/logos:
    get:
      operationId: getLogos
      parameters:
      - description: Id of the license to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/logo'
                type: array
                xml:
                  name: logos
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/logo'
                type: array
          description: Logo
      summary: Returns the list of logos based on the product id
      tags:
      - Product Logo Services
    post:
      operationId: createLogo
      parameters:
      - description: Id of the logo to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Logo'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Logo'
        description: Logo to be added to the marketplace
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Logo was succesful
      summary: Adds a new logo based on product id
      tags:
      - Product Logo Services
    put:
      operationId: updateLogo
      parameters:
      - description: Id of the product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the logo to update
        explode: false
        in: path
        name: logoId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logo'
          application/xml:
            schema:
              $ref: '#/components/schemas/logo'
        description: Logo to be added to the marketplace
        required: true
      responses:
        "200":
          description: True for updated
      summary: Updates logo by Id
      tags:
      - Product Logo Services
  /products/{productId}/logos/{logoId}:
    delete:
      operationId: deleteLogo
      parameters:
      - description: Id of the product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the logo to delete
        explode: false
        in: path
        name: logoId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: True if delete was successful
      summary: Deletes the logo by Id
      tags:
      - Product Logo Services
    get:
      operationId: getLogo
      parameters:
      - description: Id of the product to retrieve logos
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the logo to retrieve
        explode: false
        in: path
        name: logoId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/logo'
            application/json:
              schema:
                $ref: '#/components/schemas/logo'
          description: Logo located using id
      summary: Retrieves the logo based on product and logo id
      tags:
      - Product Logo Services
  /products/{productId}/screenshots:
    get:
      operationId: getScreenshots
      parameters:
      - description: Id of the product to retrieve screenshots from
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/screenshot'
                type: array
                xml:
                  name: screenshots
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/screenshot'
                type: array
          description: Screenshot
      summary: Returns the list of screenshots based on product id
      tags:
      - Product Screenshot Services
    post:
      operationId: createScreenshot
      parameters:
      - description: Id of the product to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Screenshot'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Screenshot'
        description: Screenshot to be added to the marketplace
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Screenshot was succesful
      summary: Adds a new screenshots based on product id
      tags:
      - Product Screenshot Services
    put:
      operationId: updateScreenshot
      parameters:
      - description: Id of the license to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the screenshot to retrieve
        explode: false
        in: path
        name: screenshotId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the license to retrieve
        explode: false
        in: path
        name: logoId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/screenshot'
          application/xml:
            schema:
              $ref: '#/components/schemas/screenshot'
        description: Screenshot to be added to the marketplace
        required: true
      responses:
        "200":
          description: True for updated
      summary: Updates license by Id
      tags:
      - Product Screenshot Services
  /products/{productId}/screenshots/{screenshotId}:
    delete:
      operationId: deleteScreenshot
      parameters:
      - description: Id of the license to delete
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the screenshot to retrieve
        explode: false
        in: path
        name: screenshotId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the license to retrieve
        explode: false
        in: path
        name: logoId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: True if delete was successful
      summary: Deletes the license by Id
      tags:
      - Product Screenshot Services
    get:
      operationId: getScreenshot
      parameters:
      - description: Id of the license to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the screenshot to retrieve
        explode: false
        in: path
        name: screenshotId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/screenshot'
            application/json:
              schema:
                $ref: '#/components/schemas/screenshot'
          description: Screenshot located using id
      summary: Retrieves the screenshot based on product and screenshot id
      tags:
      - Product Screenshot Services
  /products/{productId}/builds/{buildId}/configurations:
    get:
      operationId: getConfigurations
      parameters:
      - description: Id of the products to add build to
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to add build to
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/configuration'
                type: array
                xml:
                  name: configurations
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/configuration'
                type: array
          description: License
      summary: Returns the list of configurations based on product and build id
      tags:
      - Product Build Configuration Services
    post:
      operationId: addConfiguration
      parameters:
      - description: Id of the products to add build to
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to add build to
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Configuration'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Configuration'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Configuration Succesful
      summary: Adds a new configuration based on prodcut and build id
      tags:
      - Product Build Configuration Services
    put:
      description: Configuration
      operationId: updateConfiguration
      parameters:
      - description: Id of the product to update
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: configurationId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Configuration'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Configuration'
      responses:
        "200":
          description: Update Succesful
      summary: Updates product by Id
      tags:
      - Product Build Configuration Services
  /products/{productId}/builds/{buildId}/configurations/{configurationId}:
    delete:
      operationId: deleteConfiguration
      parameters:
      - description: Id of the product to delete
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: configurationId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Succesful
      summary: Deletes the Configuration by Id
      tags:
      - Product Build Configuration Services
    get:
      operationId: getConfiguration
      parameters:
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: configurationId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/configuration'
            application/json:
              schema:
                $ref: '#/components/schemas/configuration'
          description: Configuration located using product Id and build Id
      summary: Retrieves the configuration based on product, build, configuration
        id
      tags:
      - Product Build Configuration Services
  /products/{productId}/builds/{buildId}/configurations/{configurationId}/tasks:
    get:
      operationId: getConfigurationTasks
      parameters:
      - description: Id of the products to add build to
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to add build to
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to add build to
        explode: false
        in: path
        name: configurationId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/task'
                type: array
                xml:
                  name: tasks
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/task'
                type: array
          description: License
      summary: Returns the list of tasks based on product, build, configuration id
      tags:
      - Product Build Configuration Task Services
    post:
      operationId: addConfigurationTask
      parameters:
      - description: Id of the products to add build to
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to add build to
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to add build to
        explode: false
        in: path
        name: configurationId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Task'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Task'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Configuration Succesful
      summary: Adds a new task based on product, build, and configuration id
      tags:
      - Product Build Configuration Task Services
    put:
      operationId: updateConfigurationTask
      parameters:
      - description: Id of the product to update
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: configurationId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Task'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Task'
      responses:
        "200":
          description: Update Succesful
      summary: Updates product by Id
      tags:
      - Product Build Configuration Task Services
  /products/{productId}/builds/{buildId}/configurations/{configurationId}/task/{taskId}:
    delete:
      operationId: deleteConfigurationTask
      parameters:
      - description: Id of the product to delete
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: configurationId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Succesful
      summary: Deletes the Configuration by Id
      tags:
      - Product Build Configuration Task Services
    get:
      operationId: getConfigurationTask
      parameters:
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: configurationId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/task'
            application/json:
              schema:
                $ref: '#/components/schemas/task'
          description: Configuration located using product Id and build Id
      summary: Retrieves the task based on product, build, configuration, task id
      tags:
      - Product Build Configuration Task Services
  /products/{productId}/builds/{buildId}/dependencies:
    get:
      operationId: getDependencies
      parameters:
      - description: Id of the products to add dependency
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the build to add dependency
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/dependency'
                type: array
                xml:
                  name: dependencies
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/dependency'
                type: array
          description: License
      summary: Returns the list of dependencies based on product and build id
      tags:
      - Product Build Dependency Services
    post:
      operationId: addDependency
      parameters:
      - description: Id of the product to update dependency
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the build to update dependency
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Dependency'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Dependency'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Dependency Succesful
      summary: Adds a new dependency based on product and build id
      tags:
      - Product Build Dependency Services
    put:
      operationId: updateDepenedency
      parameters:
      - description: Id of the product to update dependency
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the build to update dependency
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Dependency'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Dependency'
      responses:
        "200":
          description: Update Succesful
      summary: Updates dependency based on product and build id
      tags:
      - Product Build Dependency Services
  /products/{productId}/builds/{buildId}/dependencies/{dependencyId}:
    delete:
      operationId: deleteDependency
      parameters:
      - description: Id of the product to delete
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: dependencyId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Succesful
      summary: Deletes dependency based on product, build and dependency id
      tags:
      - Product Build Dependency Services
    get:
      operationId: getDependency
      parameters:
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: dependencyId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/dependency'
            application/json:
              schema:
                $ref: '#/components/schemas/dependency'
          description: Dependency located using product Id and build Id
      summary: Retrieves the dependency based on product, build and dependency id
      tags:
      - Product Build Dependency Services
  /products/{productId}/builds/{buildId}/exposures:
    get:
      operationId: getExposures
      parameters:
      - description: Id of the products to add build to
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/exposure'
                type: array
                xml:
                  name: exposures
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/exposure'
                type: array
          description: License
      summary: Returns the list of exposures based on product and build id
      tags:
      - Product Build Exposure Services
    post:
      operationId: addExposure
      parameters:
      - description: Id of the products to add build to
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Exposure'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Exposure'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Dependency Succesful
      summary: Adds a new exposures based on product and build id
      tags:
      - Product Build Exposure Services
    put:
      operationId: updateExposure
      parameters:
      - description: Id of the product to update
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: exposureId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Exposure'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Exposure'
      responses:
        "200":
          description: Update Succesful
      summary: Updates product by Id
      tags:
      - Product Build Exposure Services
  /products/{productId}/builds/{buildId}/exposures/{exposureId}:
    delete:
      operationId: deleteExposure
      parameters:
      - description: Id of the product to delete
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: exposureId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Delete Succesful
      summary: Deletes the Dependency by Id
      tags:
      - Product Build Exposure Services
    get:
      operationId: getExposure
      parameters:
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: buildId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the products to retrieve
        explode: false
        in: path
        name: exposureId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/exposure'
            application/json:
              schema:
                $ref: '#/components/schemas/exposure'
          description: Dependency located using product Id and build Id
      summary: Retrieves the exposure based on product and build id
      tags:
      - Product Build Exposure Services
  /entitlements:
    get:
      operationId: getEntitlements
      parameters:
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/entitlement'
                type: array
                xml:
                  name: entitlements
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/entitlement'
                type: array
          description: Entitlement
      summary: Returns the list of entitlements currently available by the marketplace
      tags:
      - Entitlement Services
    post:
      operationId: createEntitlement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Entitlement'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Entitlement'
        description: Entitlement to be added to the marketplace
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Entitlement was succesful
      summary: Adds a new entitlement to the marketplace
      tags:
      - Entitlement Services
  /entitlements/{entitlementId}:
    delete:
      operationId: deleteEntitlement
      parameters:
      - description: Id of the entitlement to delete
        explode: false
        in: path
        name: entitlementId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: True if delete was successful
      summary: Deletes the entitlement by Id
      tags:
      - Entitlement Services
    get:
      operationId: getEntitlement
      parameters:
      - description: Id of the entitlement to retrieve
        explode: false
        in: path
        name: entitlementId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/entitlement'
            application/json:
              schema:
                $ref: '#/components/schemas/entitlement'
          description: Entitlement located using id
      summary: Retrieves the entitlement based on entitlement id
      tags:
      - Entitlement Services
    put:
      operationId: updateEntitlement
      parameters:
      - description: Id of the entitlement to retrieve
        explode: false
        in: path
        name: entitlementId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entitlement'
          application/xml:
            schema:
              $ref: '#/components/schemas/entitlement'
        description: Entitlement to be added to the marketplace
        required: true
      responses:
        "200":
          description: True for updated
      summary: Updates entitlement by Id
      tags:
      - Entitlement Services
  /attempts:
    get:
      operationId: getAttempts
      parameters:
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/attempt'
                type: array
                xml:
                  name: attempts
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attempt'
                type: array
          description: Attempt
      summary: Returns the list of attempts currently available in the marketplace
      tags:
      - Attempt Services
    post:
      operationId: createAttempt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Attempt'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Attempt'
        description: Attempt to be added to the marketplace
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Attempt was succesful
      summary: Adds a new attempt to the marketplace
      tags:
      - Attempt Services
    put:
      operationId: updateAttempt
      parameters:
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: attemptId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attempt'
          application/xml:
            schema:
              $ref: '#/components/schemas/attempt'
        description: Attempt to be added to the marketplace
        required: true
      responses:
        "200":
          description: |-
            True for updated

            - 'write:attempts' - 'read:attempts'
      summary: Updates attempt by Id
      tags:
      - Attempt Services
  /attempts/{attemptId}:
    delete:
      operationId: deleteAttempt
      parameters:
      - description: Id of the attempt to delete
        explode: false
        in: path
        name: attemptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: True if delete was successful
      summary: Deletes the attempt by Id
      tags:
      - Attempt Services
    get:
      operationId: getAttempt
      parameters:
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: attemptId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/attempt'
            application/json:
              schema:
                $ref: '#/components/schemas/attempt'
          description: Attempt located using id
      summary: Retrieves the attempt based on attempt id
      tags:
      - Attempt Services
  /roles/{roleId}/appointments:
    get:
      operationId: getAppointments
      parameters:
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/appointment'
                type: array
                xml:
                  name: appointments
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/appointment'
                type: array
          description: Appointment
      summary: Returns the list of appointments based on role id
      tags:
      - Role Appointment Services
    post:
      operationId: createAppointment
      parameters:
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Appointment'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Appointment'
        description: Appointment to be added to the marketplace
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Appointment was succesful
      summary: Adds a new appointments based on role id
      tags:
      - Role Appointment Services
    put:
      operationId: updateAppointment
      parameters:
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: appointmentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/appointment'
          application/xml:
            schema:
              $ref: '#/components/schemas/appointment'
        description: Appointment to be added to the marketplace
        required: true
      responses:
        "200":
          description: True for updated
      summary: Updates appointment specified by role id and appointment id
      tags:
      - Role Appointment Services
  /roles/{roleId}/appointments/{appointmentId}:
    delete:
      operationId: deleteAppointment
      parameters:
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: appointmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: True if delete was successful
      summary: Deletes the appointment specified by role id and appointment id
      tags:
      - Role Appointment Services
    get:
      operationId: getAppointment
      parameters:
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the attempt to retrieve
        explode: false
        in: path
        name: appointmentId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/appointment'
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
          description: Appointment located using id
      summary: Retrieves the appointment based on role and appointment id
      tags:
      - Role Appointment Services
  /entitlements/{entitlementId}/claims:
    get:
      operationId: getClaims
      parameters:
      - description: Id of the claim to retrieve
        explode: false
        in: path
        name: entitlementId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/appointment'
                type: array
                xml:
                  name: claims
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/appointment'
                type: array
          description: Claim
      summary: Returns the list of claims based on entitlement id
      tags:
      - Entitlement Claim Services
    post:
      operationId: createClaim
      parameters:
      - description: Id of the claim to retrieve
        explode: false
        in: path
        name: entitlementId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/Claim'
          application/xml:
            schema:
              $ref: '#/components/requestBodies/Claim'
        description: Appointment to be added to the marketplace
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: 245b3a76-9768-48ac-907f-0dc45174515f
                type: string
          description: Add Claim was succesful
      summary: Adds a new claim based on entitlement id
      tags:
      - Entitlement Claim Services
    put:
      operationId: updateClaim
      parameters:
      - description: Id of the claim to retrieve
        explode: false
        in: path
        name: entitlementId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the claim to retrieve
        explode: false
        in: path
        name: claimId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/claim'
          application/xml:
            schema:
              $ref: '#/components/schemas/claim'
        description: Appointment to be added to the marketplace
        required: true
      responses:
        "200":
          description: True for updated
      summary: Updates claim specified by entitlement id and claim id
      tags:
      - Entitlement Claim Services
  /entitlements/{entitlementId}/claims/{claimId}:
    delete:
      operationId: deleteClaim
      parameters:
      - description: Id of the claim to retrieve
        explode: false
        in: path
        name: entitlementId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the claim to retrieve
        explode: false
        in: path
        name: claimId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: True if delete was successful
      summary: Deletes claim specified by entitlement id and claim id
      tags:
      - Entitlement Claim Services
    get:
      operationId: getClaim
      parameters:
      - description: Id of the claim to retrieve
        explode: false
        in: path
        name: entitlementId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the claim to retrieve
        explode: false
        in: path
        name: claimId
        required: true
        schema:
          type: string
        style: simple
      - description: format
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - xml
          - json
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/claim'
            application/json:
              schema:
                $ref: '#/components/schemas/claim'
          description: Claim located using id and Entitlement id
      summary: Retrieves the claim based on entitlement and claim id
      tags:
      - Entitlement Claim Services
components:
  requestBodies:
    License:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/license'
        application/xml:
          schema:
            $ref: '#/components/schemas/license'
      description: License
      required: true
    Product:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/product'
        application/xml:
          schema:
            $ref: '#/components/schemas/product'
      description: Product
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
        application/xml:
          schema:
            $ref: '#/components/schemas/user'
      description: User
      required: true
    Build:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/build'
        application/xml:
          schema:
            $ref: '#/components/schemas/build'
      description: Build
      required: true
    Interface:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/interface'
        application/xml:
          schema:
            $ref: '#/components/schemas/interface'
      description: Interface
      required: true
    IdentityProvider:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/identityProvider'
        application/xml:
          schema:
            $ref: '#/components/schemas/identityProvider'
      description: Identity Provider
      required: true
    Role:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/role'
        application/xml:
          schema:
            $ref: '#/components/schemas/role'
      description: Role
      required: true
    Group:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/group'
        application/xml:
          schema:
            $ref: '#/components/schemas/group'
      description: A named collection of Users for purposes of batch Role assignment.
      required: true
    Logo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/logo'
        application/xml:
          schema:
            $ref: '#/components/schemas/logo'
      description: Logo
      required: true
    Screenshot:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/screenshot'
        application/xml:
          schema:
            $ref: '#/components/schemas/screenshot'
      description: Screenshot
      required: true
    Configuration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/configuration'
        application/xml:
          schema:
            $ref: '#/components/schemas/configuration'
      description: Configuration
      required: true
    Dependency:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/dependency'
        application/xml:
          schema:
            $ref: '#/components/schemas/dependency'
      description: Dependency
      required: true
    Exposure:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exposure'
        application/xml:
          schema:
            $ref: '#/components/schemas/exposure'
      description: Exposure
      required: true
    Task:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/task'
        application/xml:
          schema:
            $ref: '#/components/schemas/task'
      description: Task
      required: true
    Entitlement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/entitlement'
        application/xml:
          schema:
            $ref: '#/components/schemas/entitlement'
      description: Entitlement
      required: true
    Attempt:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/entitlement'
        application/xml:
          schema:
            $ref: '#/components/schemas/entitlement'
      description: Attempt
      required: true
    Appointment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/appointment'
        application/xml:
          schema:
            $ref: '#/components/schemas/appointment'
      description: Appointment
      required: true
    Claim:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/claim'
        application/xml:
          schema:
            $ref: '#/components/schemas/claim'
      description: Claim
      required: true
  schemas:
    license:
      example:
        path: path
        license: Apache License 2.0 (Apache-2.0)
        updated_at: 2000-01-23T04:56:07.000+00:00
        terms: terms
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: http://example.com/aeiou
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        url:
          format: url
          type: string
        path:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        license:
          enum:
          - Apache License 2.0 (Apache-2.0)
          - 3-clause BSD license (BSD-3-Clause)
          - 2-clause BSD license (BSD-2-Clause)
          - Creative Commons license
          - GNU General Public License (GPL)
          - GNU Lesser General Public License (LGPL)
          - MIT license (MIT)
          - Mozilla Public License 2.0 (MPL-2.0)
          - Common Development and Distribution License 1.0 (CDDL-1.0)
          - Eclipse Public License 2.0 (EPL-2.0)
          type: string
        terms:
          type: string
      required:
      - license
      - name
      - terms
      type: object
      xml:
        name: license
    product:
      example:
        visible_from: 2000-01-23T04:56:07.000+00:00
        license: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        blob: ""
        updated_at: 2000-01-23T04:56:07.000+00:00
        approved_at: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        uri: https://openapi-generator.tech
        support: support
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        description:
          type: string
        uri:
          format: uri
          type: string
        support:
          type: string
        license:
          format: uuid
          type: string
        approved_at:
          format: date-time
          type: string
        visible_from:
          format: date-time
          type: string
        blob:
          format: binary
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: product
    build:
      example:
        buildVersion: buildVersion
        containerRepository: containerRepository
        releaseNotes: releaseNotes
        updated_at: 2000-01-23T04:56:07.000+00:00
        publishedAt: 2000-01-23T04:56:07.000+00:00
        permissions: permissions
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        softwareVersion: softwareVersion
        containerTag: containerTag
        validatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: uuid
          type: string
        softwareVersion:
          type: string
        buildVersion:
          type: string
        containerRepository:
          type: string
        containerTag:
          type: string
        validatedAt:
          format: date-time
          type: string
        publishedAt:
          format: date-time
          type: string
        permissions:
          type: string
        releaseNotes:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: build
    interface:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        version: version
        url: https://openapi-generator.tech
        ordinal: 0
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        url:
          format: uri
          type: string
        version:
          type: string
        ordinal:
          type: integer
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      type: object
      xml:
        name: Interface
    user:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        familyName: familyName
        givenName: givenName
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: email
      properties:
        id:
          format: uuid
          type: string
        familyName:
          type: string
        givenName:
          type: string
        email:
          format: email
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      type: object
      xml:
        name: User
    identity:
      example:
        sub: sub
        jwt: jwt
        created_at: 2000-01-23T04:56:07.000+00:00
        locale: locale
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        identityProviderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updated_at: 2000-01-23T04:56:07.000+00:00
        nofityViaSMS: nofityViaSMS
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        hd: hd
        iat: iat
        nofityViaEmail: nofityViaEmail
        email: email
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        identityProviderId:
          format: uuid
          type: string
        sub:
          type: string
        iat:
          type: string
        hd:
          type: string
        locale:
          type: string
        email:
          type: string
        jwt:
          type: string
        nofityViaEmail:
          type: string
        nofityViaSMS:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: identity
    platform:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        publicKey: publicKey
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        userId:
          format: uuid
          type: string
        publicKey:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: platform
    identityProvider:
      example:
        publicKeys: publicKeys
        clientId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updated_at: 2000-01-23T04:56:07.000+00:00
        configuration: configuration
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        clientSecret: clientSecret
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        alternateClientId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        clientId:
          format: uuid
          type: string
        clientSecret:
          type: string
        alternateClientId:
          format: uuid
          type: string
        configuration:
          type: string
        publicKeys:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: identityProvider
    group:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        description:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      type: object
      xml:
        name: group
    role:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        permissions: permissions
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        permissions:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      type: object
      xml:
        name: role
    logo:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        imageFileContent: ""
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        imageFileContent:
          format: binary
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: logo
    screenshot:
      example:
        productID: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updated_at: 2000-01-23T04:56:07.000+00:00
        imageFileContent: ""
        caption: caption
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        imageFileSize: 0
      properties:
        id:
          format: uuid
          type: string
        productID:
          format: uuid
          type: string
        caption:
          type: string
        imageFileContent:
          format: binary
          type: string
        imageFileSize:
          format: int64
          type: integer
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: Screenshot
    configuration:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        buildId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        buildId:
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: configuration
    task:
      description: The schema file used by HL7 Marketplace-compliant products to declare
        injectable runtime configuration fields.
      example:
        memory_maximum: 1.6027456183070403
        instances_minimum: 0.14658129805029452
        environment:
        - default: default
          description: description
          key: key
          required: true
        - default: default
          description: description
          key: key
          required: true
        options:
        - options
        - options
        instances_maximum: 0.5962133916683182
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        configurationID: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        label: label
        ports:
        - 5.637376656633329
        - 5.637376656633329
        memory_minimum: 1.0800828190461012
      properties:
        id:
          format: uuid
          type: string
        configurationID:
          format: uuid
          type: string
        label:
          description: Human-readable name used for user presentation.
          type: string
        memory_minimum:
          description: Minimum memory (in MiB) required for the task to function at
            runtime.
          minimum: 1
          type: number
        memory_maximum:
          description: Maximum memory (in MiB) the task may allocate at runtime.
          minimum: 1
          type: number
        instances_minimum:
          description: The fewest instances (inclusive) of the task required at runtime.
          minimum: 0
          type: number
        instances_maximum:
          description: 'The largest allowable number of instances (inclusive) of the
            task allowed at runtime. Default: unlimited'
          minimum: 0
          type: number
        options:
          description: Static parameters passed into the task at runtime. E.g. ['--mode',
            'production']
          items:
            type: string
          type: array
        ports:
          items:
            type: number
          type: array
        environment:
          items:
            $ref: '#/components/schemas/environment_variable'
          type: array
      required:
      - configurationID
      - environment
      - id
      - instances_minimum
      - label
      - memory_maximum
      - memory_minimum
      - ports
      title: Runtime Task Schema for Marketplace Products
      type: object
    environment_variable:
      example:
        default: default
        description: description
        key: key
        required: true
      properties:
        key:
          type: string
        description:
          type: string
        required:
          type: boolean
        default:
          type: string
      required:
      - description
      - key
      type: object
    dependency:
      description: The SoF product metadata file used by Graphite Marketplace and
        all marketplaces compliant with HL7 Marketplace product packaging specifications
      example:
        mappings: mappings
        updated_at: 2000-01-23T04:56:07.000+00:00
        build:
        - build
        - build
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        interfaceId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        uuid: uuid
        required: true
      properties:
        uuid:
          description: Product UUID of the thing this is dependent upon.
          type: string
        build:
          description: Permitted set of build UUIDs that will satisfy the dependency.
          items:
            description: An explicit build UUID that willproduct dependency.
            type: string
          type: array
        id:
          format: uuid
          type: string
        interfaceId:
          format: uuid
          type: string
        required:
          type: boolean
        mappings:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - build
      - uuid
      title: Marketplace Product Build Metadata Schema for Applications and Content
      type: object
    exposure:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        buildId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        interfaceId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        buildId:
          format: uuid
          type: string
        interfaceId:
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: exposure
    entitlement:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        productLicenseId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        validFrom: 2000-01-23T04:56:07.000+00:00
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
        productLicenseId:
          format: uuid
          type: string
        validFrom:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: entitlement
    attempt:
      example:
        productId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updated_at: 2000-01-23T04:56:07.000+00:00
        claimantType: claimantType
        claimantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        claimId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        claimId:
          format: uuid
          type: string
        claimantId:
          format: uuid
          type: string
        claimantType:
          type: string
        productId:
          format: uuid
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: attempt
    appointment:
      example:
        entryType: entryType
        updated_at: 2000-01-23T04:56:07.000+00:00
        roleId: roleId
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        entryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        entryId:
          format: uuid
          type: string
        entryType:
          type: string
        roleId:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: appointment
    claim:
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        claimantType: claimantType
        claimantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        authorizationCount: authorizationCount
        entitlementId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        authorizedAt: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        claimantId:
          format: uuid
          type: string
        claimantType:
          type: string
        entitlementId:
          format: uuid
          type: string
        authorizationCount:
          type: string
        authorizedAt:
          format: date-time
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - name
      type: object
      xml:
        name: claim
  securitySchemes:
    licensestore_auth:
      flows:
        implicit:
          authorizationUrl: https://licensestore.swagger.io/oauth/authorize
          scopes:
            write:licenses: modify licenses in your account
            read:licenses: read your licenses
      type: oauth2
    interfacestore_auth:
      flows:
        implicit:
          authorizationUrl: https://interfacestore.swagger.io/oauth/authorize
          scopes:
            write:interfaces: modify interfaces in your account
            read:interfaces: read your interfaces
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
